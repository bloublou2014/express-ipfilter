{"version":3,"sources":["../src/ipFilter.js"],"names":["_","require","ipUtil","rangeCheck","IpDeniedError","module","exports","ipFilter","ips","opts","MODE_ALLOW","MODE_DENY","LOG_LEVEL_ALLOW","LOG_LEVEL_DENY","LOG_LEVEL_ALL","isGetIpsFunction","isFunction","getIps","logger","message","console","log","settings","defaults","mode","logLevel","logF","allowedHeaders","excluding","detectIp","getClientIp","req","ipAddress","headerIp","reduce","acc","header","testIp","headers","splitHeaderIp","split","connection","remoteAddress","isV6Format","indexOf","isV4Format","matchClientIp","ip","result","find","constraint","undefined","validRange","testCidrBlock","testExplicitIp","Array","isArray","length","Error","testRange","inRange","constraintRange","startIp","toLong","endIp","longIp","error","next","err","optimized","init","checkSettings","isAllowMode","hasExcluding","exludingRegExp","map","exclude","RegExp","isLogAllow","isLogDeny","checkIps","each","res","findExcluding","regex","test","url","_ips","ipFound"],"mappings":"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","file":"ipfilter.js","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nlet _ = require('lodash');\nlet ipUtil = require('ip');\nlet rangeCheck = require('range_check');\nlet IpDeniedError = require('./deniedError');\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      let ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *          getIps = function() { return ['127.0.0.1']; };\n *\n *      app.use(ipfilter(ips));\n *      app.use(ipfilter(getIps));\n *\n * Options:\n *\n *  - `mode` ['allow','deny'], whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `logF` Function to use for logging.\n *  - `log` console log actions. Defaults to true.\n *  - `allowedHeaders` Array of headers to check for forwarded IPs.\n *  - 'excluding' routes that should be excluded from ip filtering\n *\n * @param [ips] {Array} IP addresses or {Function} that returns the array of IP addresses\n * @param [opts] {Object} options\n * @api public\n */\nmodule.exports = function ipFilter(ips, opts) {\n  ips = ips || false;\n\n  const MODE_ALLOW = 'allow';\n  const MODE_DENY = 'deny';\n  const LOG_LEVEL_ALLOW = MODE_ALLOW;\n  const LOG_LEVEL_DENY = MODE_DENY;\n  const LOG_LEVEL_ALL = 'all';\n\n  let isGetIpsFunction = _.isFunction(ips);\n  let getIps = isGetIpsFunction ? ips : function () {\n    return ips;\n  };\n\n  let logger = function (message) {\n    console.log(message);\n  };\n  let settings = _.defaults(opts || {}, {\n    mode: MODE_DENY,\n    log: true,\n    logLevel: LOG_LEVEL_ALL,\n    logF: logger,\n    allowedHeaders: [],\n    excluding: [],\n    detectIp: getClientIp\n  });\n\n  function getClientIp(req) {\n    let ipAddress;\n\n    let headerIp = _.reduce(settings.allowedHeaders, function (acc, header) {\n      let testIp = req.headers[header];\n      if (testIp !== '') {\n        acc = testIp;\n      }\n\n      return acc;\n    }, '');\n\n    if (headerIp) {\n      let splitHeaderIp = headerIp.split(',');\n      ipAddress = splitHeaderIp[0];\n    }\n\n    if (!ipAddress) {\n      ipAddress = req.connection.remoteAddress;\n    }\n\n    if (!ipAddress) {\n      return '';\n    }\n\n    if (ipUtil.isV6Format(ipAddress) && ~ipAddress.indexOf('::ffff')) {\n      ipAddress = ipAddress.split('::ffff:')[1];\n    }\n\n    if (ipUtil.isV4Format(ipAddress) && ~ipAddress.indexOf(':')) {\n      ipAddress = ipAddress.split(':')[0];\n    }\n\n    return ipAddress;\n  }\n\n  let matchClientIp = function (ip) {\n    // optimize search, stop if found\n    let result = _.find(getIps(), function (constraint) {\n      return testIp(ip, constraint);\n    });\n    return result !== undefined;\n  };\n\n  let testIp = function (ip, constraint, mode) {\n    // Check if a single ip or a range\n    if (typeof constraint === 'string') {\n      if (rangeCheck.validRange(constraint)) {\n        return testCidrBlock(ip, constraint, mode);\n      } else {\n        return testExplicitIp(ip, constraint, mode);\n      }\n    }\n\n    if (Array.isArray(constraint)) {\n      if (constraint.length !== 2) {\n        throw new Error('Range constraint must contains 2 elements');\n      }\n      return testRange(ip, constraint);\n    }\n\n    throw new Error('constraint not supported');\n  };\n\n  let testExplicitIp = function (ip, constraint) {\n    return (ip === constraint);\n  };\n\n  let testCidrBlock = function (ip, constraint) {\n    return (rangeCheck.inRange(ip, constraint));\n  };\n\n  let testRange = function (ip, constraintRange) {\n    let startIp = ipUtil.toLong(constraintRange[0]);\n    let endIp = ipUtil.toLong(constraintRange[1]);\n    let longIp = ipUtil.toLong(ip);\n    return (longIp >= startIp && longIp <= endIp);\n  };\n\n  let error = function (ip, next) {\n    let err = new IpDeniedError('Access denied to IP address: ' + ip);\n    return next(err);\n  };\n\n  // region prepare option to avoid costly object creation for each request\n  let optimized = {};\n\n  let init = function () {\n    checkSettings();\n    // optimize mode to avoid costly string comparison\n    optimized.isAllowMode = (settings.mode === MODE_ALLOW);\n    optimized.hasExcluding = (settings.excluding.length);\n    optimized.exludingRegExp = _.map(settings.excluding, function (exclude) {\n      return new RegExp(exclude);\n    });\n    optimized.isLogAllow = (settings.log && _.indexOf([LOG_LEVEL_ALL, LOG_LEVEL_ALLOW], settings.logLevel) > -1);\n    optimized.isLogDeny = (settings.log && _.indexOf([LOG_LEVEL_ALL, LOG_LEVEL_DENY], settings.logLevel) > -1);\n  };\n\n  let checkSettings = function () {\n    if (_.indexOf([MODE_ALLOW, MODE_DENY], settings.mode) < 0) {\n      throw new Error('mode must be ' + MODE_ALLOW + ' or ' + MODE_DENY);\n    }\n    if (_.indexOf([LOG_LEVEL_ALL, LOG_LEVEL_ALLOW, LOG_LEVEL_DENY], settings.logLevel) < 0) {\n      throw new Error('logLevel must be ' + LOG_LEVEL_ALL + ', ' + LOG_LEVEL_ALLOW + ' or ' + LOG_LEVEL_DENY);\n    }\n    checkIps();\n  };\n\n  let checkIps = function () {\n    if (!isGetIpsFunction) {\n      let ips = getIps();\n      // check if string, or Range\n      _.each(ips, function (constraint) {\n        if (typeof constraint === 'string') {\n          return true;\n        }\n        if (Array.isArray(constraint)) {\n          if (constraint.length !== 2) {\n            throw new Error('Range constraint must contains 2 elements');\n          }\n          return true;\n        }\n        throw new Error('Range constraint not supported');\n      });\n    }\n  };\n\n  init();\n  // endregion\n\n  return function (req, res, next) {\n    if (optimized.hasExcluding) {\n      let findExcluding = _.find(optimized.exludingRegExp, function (regex) {\n        return regex.test(req.url);\n      });\n\n      if (findExcluding !== undefined) {\n        if (optimized.isLogAllow) {\n          settings.logF('Access granted for excluded path: ' + req.url);\n        }\n        return next();\n      }\n    }\n\n    let _ips = getIps();\n    if (!_ips || !_ips.length) {\n      if (optimized.isAllowMode) {\n        // ip list is empty, thus no one allowed\n        return error('0.0.0.0/0', next);\n      } else {\n        // there are no blocked ips, skip\n        return next();\n      }\n    }\n\n    let ip = settings.detectIp(req);\n    let ipFound = matchClientIp(ip, req);\n    if (ipFound && optimized.isAllowMode) {\n      // Grant access\n      if (optimized.isLogAllow) {\n        settings.logF('Access granted to IP address: ' + ip);\n      }\n      return next();\n    }\n\n    // Deny access\n    if (optimized.isLogDeny) {\n      settings.logF('Access denied to IP address: ' + ip);\n    }\n\n    return error(ip, next);\n  };\n};\n"]}